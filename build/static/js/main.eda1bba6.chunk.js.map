{"version":3,"sources":["services/firebase/firebase.util.ts","services/firebase/index.tsx","component/quotesComponent/data.ts","component/quotesComponent/index.tsx","features/user/user.thunk.ts","features/sign-in-and-sign-up/SignInAndSignUp.tsx","features/user/userSlice.ts","utils/privateRoute.tsx","App.tsx","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","theme.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","console","info","process","window","location","hostname","useEmulator","quotes","_id","quote","cite","useStyles","makeStyles","theme","createStyles","root","QuotesComponent","useState","currentQuoteIndex","setCurrentQuoteIndex","classes","changeCurrentQuote","length","s","useEffect","loop","setTimeout","clearTimeout","SwitchTransition","CSSTransition","timeout","classNames","Card","className","CardContent","Typography","userSignIn","createAsyncThunk","userAuth","thunkAPI","a","getIdToken","axios","defaults","headers","common","Authorization","log","post","then","res","userSnapshot","token","data","catch","error","loginStyles","margin","spacing","width","display","flexDirection","height","left","signInStyles","maxWidth","name","form","padding","paddingTop","paddingBottom","SignInComponent","from","useLocation","state","pathname","history","useHistory","dispatch","useDispatch","uiConfig","signInFlow","callbacks","signInSuccessWithAuthResult","authResult","redirectUrl","user","credential","operationType","replace","signInFailure","Promise","uiShown","signInSuccessUrl","signInOptions","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","Paper","variant","firebaseAuth","Login","Grid","container","justify","Hidden","xsDown","item","md","alignItems","xs","userSlice","createSlice","initialState","currentUser","reducers","setCurrentUser","action","payload","signInSuccess","extraReducers","builder","addCase","fulfilled","rejected","actions","selectCurrentUser","PrivateRoute","Component","component","rest","useSelector","to","App","unsubscribeFromAuth","onAuthStateChanged","path","counterSlice","value","increment","decrement","incrementByAmount","persistConfig","key","storage","combineReducers","counter","counterReducer","userReducer","persistedReducer","persistReducer","store","configureStore","reducer","devTools","Boolean","match","rawTheme","createMuiTheme","palette","black","white","background","paper","default","primary","light","main","dark","contrastText","secondary","text","disabled","hint","typography","fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontHeader","color","fontWeight","textTransform","placeholder","grey","h1","letterSpacing","h2","h3","h4","h5","h6","subtitle1","body1","body2","persistor","persistStore","ReactDOM","render","StrictMode","loading","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.eda1bba6.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCXAdv914Vfg6jGthICOGNAa7_lLp8Hsl0\",\n  authDomain: \"near-insight.firebaseapp.com\",\n  databaseURL: \"https://near-insight.firebaseio.com\",\n  projectId: \"near-insight\",\n  storageBucket: \"near-insight.appspot.com\",\n  messagingSenderId: \"370297661080\",\n  appId: \"1:370297661080:web:bae687f9b0dd41b71fd2ed\",\n  measurementId: \"G-7LGD85VY05\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport const auth = firebase.auth();\nconsole.info(process.env.NODE_ENV);\nif (\n  process.env.NODE_ENV === \"development\" ||\n  window.location.hostname === \"localhost\"\n) {\n  auth.useEmulator(\"http://localhost:9099/\");\n} else {\n}\n\n// export async function createUserProfileDocument(\n//   userAuth: firebase.User | any,\n//   additionlData?: any\n// ) {\n//   const userRef = db.doc(`users/${userAuth.uid}`);\n//   const noImg = \"no-img.png\";\n//   const snapShot = await userRef.get();\n\n//   if (!snapShot.exists) {\n//     const { displayName, email } = userAuth,\n//       createdAt = new Date();\n//     try {\n//       await userRef.set({\n//         userId: userAuth.uid,\n//         displayName,\n//         email,\n//         createdAt,\n//         imageUrl: `https://firebasestorage.googleapis.com/v0/b/${firebaseConfig.storageBucket}/o/${noImg}?alt=media`,\n//         ...additionlData,\n//       });\n//     } catch (error) {\n//       console.error(\"error creating user\", error.message);\n//     }\n//   }\n\n//   return userRef;\n// }\n\nexport default firebase;\n","import firebase from \"./firebase.util\";\nexport { auth } from \"./firebase.util\";\n\nexport default firebase;\n","export interface Quote {\n  _id: number;\n  quote: string;\n  cite: string;\n}\n\nconst quotes: Quote[] = [\n  {\n    _id: 1,\n    quote: \"“Not all those who wander are lost.”\",\n    cite: \"J.R.R. Tolkien, The Fellowship of the Ring\",\n  },\n  {\n    _id: 2,\n    quote:\n      \"“The world is a book and those who do not travel read only one page.”\",\n    cite: \"St. Augustine\",\n  },\n  {\n    _id: 3,\n    quote:\n      \"“Why do you go away? So that you can come back. So that you can see the place you came from with new eyes and extra colors. And the people there see you differently, too. Coming back to where you started is not the same as never leaving.”\",\n    cite: \"Terry Pratchett, A Hat Full of Sky\",\n  },\n];\n\nexport default quotes;\n","import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport { CSSTransition, SwitchTransition } from \"react-transition-group\";\n\nimport quotes from \"./data\";\n\nimport \"./style.scss\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      // maxWidth: \"100%\",\n    },\n  })\n);\n\nexport default function QuotesComponent() {\n  const [currentQuoteIndex, setCurrentQuoteIndex] = useState(0);\n  const classes = useStyles();\n\n  function changeCurrentQuote() {\n    if (currentQuoteIndex === quotes.length - 1) setCurrentQuoteIndex(0);\n    else setCurrentQuoteIndex(s => s + 1);\n  }\n\n  useEffect(() => {\n    // console.log(\"use\");\n    // the timer is 10s and transition in 2s\n    const loop = setTimeout(changeCurrentQuote, 10000);\n    return () => clearTimeout(loop);\n  });\n\n  return (\n    <SwitchTransition>\n      <CSSTransition\n        key={quotes[currentQuoteIndex]._id}\n        timeout={2000}\n        classNames=\"fade\"\n      >\n        <Card className={classes.root}>\n          <CardContent>\n            <figure>\n              <blockquote>\n                <Typography>{quotes[currentQuoteIndex].quote}</Typography>\n              </blockquote>\n              <figcaption>\n                &mdash; <cite>{quotes[currentQuoteIndex].cite}</cite>\n              </figcaption>\n            </figure>\n          </CardContent>\n        </Card>\n      </CSSTransition>\n    </SwitchTransition>\n  );\n}\n","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { User } from \"firebase\";\nimport axios from \"axios\";\n\nimport { signInFailure, signInSuccess } from \"./userSlice\";\n\n// export async function getSnapshotFromUserAuth(userAuth: User) {\n//   try {\n//     const userRef = await createUserProfileDocument(userAuth),\n//       userSnapshot = await userRef.get();\n//     console.log(userSnapshot);\n//     dispatch(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\n//   } catch (error) {\n//     dispatch(signInFailure(error));\n//   }\n// }\nexport const userSignIn = createAsyncThunk(\n  \"users/signIn\",\n  async (userAuth: User, thunkAPI) => {\n    axios.defaults.headers.common = {\n      Authorization: `Bearer ${await userAuth.getIdToken()}`,\n    };\n    console.log(await userAuth.getIdToken());\n\n    if (process.env.REACT_APP_FIREBASE_FUNCTIONS) {\n      const url = process.env.REACT_APP_FIREBASE_FUNCTIONS + \"user/create\";\n      axios\n        .post(\n          \"http://localhost:5001/near-insight/us-central1/api/user/create\",\n          { userAuth }\n        )\n        .then(res => {\n          console.log(res, \"then\");\n          const userSnapshot = res;\n          return {\n            token: userAuth.getIdToken(),\n            ...userSnapshot.data,\n          };\n        })\n        .catch(error => console.error(error));\n      //TODO:make axios request for user data\n      // userSnapshot = await userRef.get();\n      //TODO: This to get the token for api testing\n    }\n  }\n);\n","import React, { useState } from \"react\";\n\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\n\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport {\n  Button,\n  Hidden,\n  Grid,\n  TextField,\n  Paper,\n  Typography,\n  FormControl,\n  InputLabel,\n} from \"@material-ui/core\";\n\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport firebase, { auth } from \"services/firebase\";\n\nimport QuotesComponent from \"component/quotesComponent\";\nimport BootstrapInput from \"component/BootStrapInputComponent\";\nimport { userSignIn } from \"features/user/user.thunk\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\n\nconst signUpStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      \"& > *\": {\n        margin: theme.spacing(1),\n        width: \"25ch\",\n      },\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n  })\n);\n\nconst loginStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      height: \"100vh\",\n    },\n    left: {\n      width: \"40%\",\n    },\n  })\n);\n\nconst signInStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      maxWidth: 400,\n    },\n    name: {},\n    form: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      padding: 40,\n      paddingTop: 10,\n      paddingBottom: 0,\n    },\n  })\n);\n\ninterface Credentials {\n  displayName: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n}\n\nfunction SignInComponent() {\n  const location = useLocation();\n  //@ts-ignore\n  const { from } = location.state || { from: { pathname: \"/\" } };\n  const history = useHistory();\n  const dispatch = useDispatch();\n  console.log(from);\n  const uiConfig = {\n    // Popup signin flow rather than redirect flow.\n    signInFlow: \"popup\",\n    // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n    callbacks: {\n      signInSuccessWithAuthResult: function (\n        authResult: firebase.auth.UserCredential,\n        redirectUrl: string\n      ) {\n        const user = authResult.user;\n        const credential = authResult.credential;\n        // const isNewUser = authResult.additionalUserInfo.isNewUser;\n        // const providerId = authResult.additionalUserInfo.providerId;\n        const operationType = authResult.operationType;\n        // Do something with the returned AuthResult.\n        // Return type determines whether we continue the redirect\n        // automatically or whether we leave that to developer to handle.\n\n        //@ts-ignore\n        dispatch(userSignIn(user));\n        //TODO: handle redirect with react router\n        console.log(authResult);\n        history.replace(from.pathname);\n        return false;\n      },\n      signInFailure: async function (error: firebaseui.auth.AuthUIError) {\n        // Some unrecoverable error occurred during sign-in.\n        // Return a promise when error handling is completed and FirebaseUI\n        // will reset, clearing any UI. This commonly occurs for error code\n        // 'firebaseui/anonymous-upgrade-merge-conflict' when merge conflict\n        // occurs. Check below for more details on this.\n\n        //TODO: handle login flauire\n        console.log(\"login fail\", error);\n\n        return new Promise<void>(() => {\n          console.log(\"res\");\n          return;\n        });\n      },\n      uiShown: function () {\n        // The widget is rendered.\n        // Hide the loader.\n        // document.getElementById('loader').style.display = 'none';\n      },\n    },\n    signInSuccessUrl: \"/signedIn\",\n    // We will display Google and Facebook as auth providers.\n    signInOptions: [\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      firebase.auth.EmailAuthProvider.PROVIDER_ID,\n    ],\n  };\n\n  const classes = signInStyles();\n\n  return (\n    <Paper variant=\"outlined\" className={classes.root}>\n      <Typography className={classes.name}>NearInsight</Typography>\n      <div className={classes.form}>\n        <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={auth} />\n      </div>\n    </Paper>\n  );\n}\n\nfunction SignUp() {\n  const classes = signUpStyles();\n  const [credentials, setCredentials] = useState<Credentials>({\n    displayName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    event.preventDefault();\n    const { name, value } = event.target;\n    setCredentials(prevState => ({\n      [name]: value,\n      ...prevState,\n    }));\n  }\n\n  async function handleSubmit(event: React.FormEvent) {\n    event.preventDefault();\n    const { displayName, email, password, confirmPassword } = credentials;\n    if (password !== confirmPassword) {\n      alert(\"Pass not match\");\n      return;\n    }\n    try {\n      const { user } = await auth.createUserWithEmailAndPassword(\n        email,\n        password\n      );\n      // await createUserProfileDocument(user, { displayName });\n      setCredentials({\n        displayName: \"\",\n        email: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <form className={classes.root} noValidate autoComplete=\"off\">\n      <TextField\n        id=\"email\"\n        label=\"Email\"\n        type=\"text\"\n        value={credentials.email}\n        onChange={handleChange}\n      />\n      <TextField\n        id=\"password\"\n        label=\"Password\"\n        type=\"password\"\n        value={credentials.password}\n        onChange={handleChange}\n      />\n      <TextField\n        id=\"confirmPassword\"\n        label=\"confirmPassword\"\n        type=\"password\"\n        value={credentials.confirmPassword}\n        onChange={handleChange}\n      />\n      <Button onClick={handleSubmit}>Submit</Button>\n    </form>\n  );\n}\nexport default function Login() {\n  const classes = loginStyles();\n  return (\n    <Grid spacing={3} container justify=\"space-around\" className={classes.root}>\n      {/* TODO: use maxwith and margin:auto to apply border */}\n      <Hidden xsDown>\n        <Grid\n          item\n          container\n          md={6}\n          className={classes.left}\n          alignItems=\"center\"\n          justify=\"center\"\n        >\n          <QuotesComponent />\n        </Grid>\n      </Hidden>\n      <Grid item md={6} xs alignItems=\"center\" justify=\"center\" container>\n        <SignInComponent />\n      </Grid>\n    </Grid>\n  );\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk, RootState } from \"app/store\";\nimport { userSignIn } from \"./user.thunk\";\n\ninterface UserState {\n  currentUser: any;\n  error: any;\n}\n\n//TODO:Get the type of current user\nconst initialState: UserState = { currentUser: null, error: null };\n\nexport const userSlice = createSlice({\n    name: \"user\",\n    initialState,\n    reducers: {\n      setCurrentUser: (state, action: PayloadAction<any>) => {\n        state.currentUser = action.payload;\n      },\n      signInSuccess: (state, action: PayloadAction<any>) => {\n        state.currentUser = action.payload;\n      },\n      signInFailure: (state, action: PayloadAction<any>) => {\n        state.error = action.payload;\n      },\n    },\n    extraReducers: builder => {\n      builder\n        .addCase(userSignIn.fulfilled, (state, action) => {\n          state.currentUser = action.payload;\n          state.error = null;\n        })\n        .addCase(userSignIn.rejected, (state, action) => {\n          console.error(action.error);\n          state.error = action.error;\n          state.currentUser = null;\n        });\n    },\n  }),\n  { setCurrentUser, signInFailure, signInSuccess } = userSlice.actions,\n  selectCurrentUser = (state: RootState) => state.user.currentUser;\n\nexport default userSlice.reducer;\n","import React from \"react\";\nimport { Redirect, Route, useLocation } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nimport { selectCurrentUser } from \"features/user/userSlice\";\nimport { auth } from \"services/firebase\";\n//@ts-ignore\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  const location = useLocation();\n  const currentUser = useSelector(selectCurrentUser);\n  console.log(auth.currentUser);\n\n  return (\n    <Route {...rest}>\n      {currentUser ? (\n        <Component />\n      ) : (\n        <Redirect to={{ pathname: \"/\", state: { from: location } }} />\n      )}\n    </Route>\n  );\n};\n\nexport default PrivateRoute;\n","import React, { useState, useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { firestore } from \"firebase\";\n\nimport SignInAndSignUp from \"features/sign-in-and-sign-up/SignInAndSignUp\";\nimport { setCurrentUser } from \"features/user/userSlice\";\nimport firebase, { auth } from \"services/firebase\";\nimport { PrivateRoute } from \"utils\";\nimport \"./App.css\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      console.log(userAuth);\n      // if (userAuth) {\n      //   const userRef = await createUserProfileDocument(userAuth);\n\n      //   // Update the current user if any information change\n      //   userRef.onSnapshot((snapShot: firestore.DocumentSnapshot): void => {\n      //     const user = {\n      //       id: snapShot.id,\n      //       ...snapShot.data(),\n      //     };\n      //     setCurrentUser(user);\n      //     console.log(user);\n      //   });\n      // } else {\n      //   // When user signs out userAuth is null, set current user to null\n      //   setCurrentUser(userAuth);\n      // }\n    });\n    return () => {\n      unsubscribeFromAuth();\n    };\n  }, []);\n  const Home = () => {\n    console.log(\"home\");\n    return <p>hiiiiiiiiiii i</p>;\n  };\n  return (\n    <div className=\"App\">\n      <Switch>\n        <PrivateRoute path=\"/home\" component={Home} />\n        <Route path=\"/\">\n          <SignInAndSignUp />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../app/store';\n\ninterface CounterState {\n  value: number;\n}\n\nconst initialState: CounterState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\n  setTimeout(() => {\n    dispatch(incrementByAmount(amount));\n  }, 1000);\n};\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\nexport default counterSlice.reducer;\n","//@ts-nocheck\nimport {\n  configureStore,\n  ThunkAction,\n  Action,\n  combineReducers,\n} from \"@reduxjs/toolkit\";\nimport storage from \"redux-persist/lib/storage\";\nimport { PersistConfig, persistReducer } from \"redux-persist\";\nimport counterReducer from \"../features/counter/counterSlice\";\nimport userReducer from \"features/user/userSlice\";\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n  },\n  reducers = combineReducers({ counter: counterReducer, user: userReducer });\n\nconst persistedReducer = persistReducer(persistConfig, reducers);\nexport const store = configureStore({\n  reducer: persistedReducer,\n  devTools: process.env.NODE_ENV !== \"production\",\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { green, grey, red } from \"@material-ui/core/colors\";\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\n\nconst rawTheme = createMuiTheme({\n  palette: {\n    common: { black: \"#000\", white: \"#fff\" },\n    background: { paper: \"#fff\", default: \"#fafafa\" },\n    primary: {\n      light: \"#7986cb\",\n      main: \"rgba(3, 54, 255, 1)\",\n      dark: \"#303f9f\",\n      contrastText: \"#fff\",\n    },\n    secondary: {\n      light: \"rgba(194, 162, 59, 1)\",\n      main: \"rgba(142, 115, 0, 1)\",\n      dark: \"#c51162\",\n      contrastText: \"#fff\",\n    },\n    error: {\n      light: \"#e57373\",\n      main: \"#f44336\",\n      dark: \"#d32f2f\",\n      contrastText: \"#fff\",\n    },\n    text: {\n      primary: \"rgba(0, 0, 0, 0.87)\",\n      secondary: \"rgba(0, 0, 0, 0.54)\",\n      disabled: \"rgba(0, 0, 0, 0.38)\",\n      hint: \"rgba(0, 0, 0, 0.38)\",\n    },\n  },\n  typography: {\n    fontFamily: \"'Work Sans', sans-serif\",\n    fontSize: 14,\n    fontWeightLight: 300, // Work Sans\n    fontWeightRegular: 400, // Work Sans\n    fontWeightMedium: 700, // Roboto Condensed\n  },\n});\n\nconst fontHeader = {\n  color: rawTheme.palette.text.primary,\n  fontWeight: rawTheme.typography.fontWeightMedium,\n  fontFamily: rawTheme.typography.fontFamily,\n  textTransform: \"uppercase\",\n};\n\nconst theme = {\n  ...rawTheme,\n  palette: {\n    ...rawTheme.palette,\n    background: {\n      ...rawTheme.palette.background,\n      default: rawTheme.palette.common.white,\n      placeholder: grey[200],\n    },\n  },\n  typography: {\n    ...rawTheme.typography,\n    fontHeader,\n    h1: {\n      ...rawTheme.typography.h1,\n      ...fontHeader,\n      letterSpacing: 0,\n      fontSize: 60,\n    },\n    h2: {\n      ...rawTheme.typography.h2,\n      ...fontHeader,\n      fontSize: 48,\n    },\n    h3: {\n      ...rawTheme.typography.h3,\n      ...fontHeader,\n      fontSize: 42,\n    },\n    h4: {\n      ...rawTheme.typography.h4,\n      ...fontHeader,\n      fontSize: 36,\n    },\n    h5: {\n      ...rawTheme.typography.h5,\n      fontSize: 20,\n      fontWeight: rawTheme.typography.fontWeightLight,\n    },\n    h6: {\n      ...rawTheme.typography.h6,\n      ...fontHeader,\n      fontSize: 18,\n    },\n    subtitle1: {\n      ...rawTheme.typography.subtitle1,\n      fontSize: 18,\n    },\n    body1: {\n      ...rawTheme.typography.body2,\n      fontWeight: rawTheme.typography.fontWeightRegular,\n      fontSize: 16,\n    },\n    body2: {\n      ...rawTheme.typography.body1,\n      fontSize: 14,\n    },\n  },\n};\n\nexport default theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { persistStore } from \"redux-persist\";\n\n// @ts-ignore\nimport { ThemeProvider as MuiThemeProvider } from \"@material-ui/core/styles\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport theme from \"theme\";\n\nlet persistor = persistStore(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Router>\n          <MuiThemeProvider theme={theme}>\n            {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n            <CssBaseline />\n            <App />\n          </MuiThemeProvider>\n        </Router>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}